# app.py
import streamlit as st
import joblib
import pandas as pd
import re

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Detector de Fake News", page_icon="ü§ñ", layout="centered")
st.title("ü§ñ Detector de Fake News em Portugu√™s")
st.write("""
Este √© um prot√≥tipo de IA treinado para identificar not√≠cias potencialmente falsas.
Digite ou cole o texto da not√≠cia abaixo para ver a an√°lise.
""")

# Fun√ß√£o para pr√©-processar o texto (IGUAL √† usada no treinamento)
def preprocessar_texto(texto):
    texto = texto.lower()
    texto = re.sub(r'[^a-z√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∂√∫√ß√± ]', ' ', texto)
    texto = re.sub(r'\s+', ' ', texto).strip()
    return texto

# Carregar o modelo e o vectorizer (USANDO OS ARQUIVOS QUE VOC√äS SALVARAM)
@st.cache_resource
def carregar_modelos():
    try:
        model = joblib.load('modelo_svm.joblib')
        vectorizer = joblib.load('vectorizer.joblib')
        return model, vectorizer
    except Exception as e:
        st.error(f"Erro ao carregar modelos: {e}")
        return None, None

model, vectorizer = carregar_modelos()

# Se os modelos n√£o carregarem, n√£o exibe o restante
if model is None or vectorizer is None:
    st.stop()

# √Årea de input do usu√°rio
texto_usuario = st.text_area(
    label="**Cole o texto da not√≠cia aqui:**",
    height=200,
    placeholder="Ex: 'Cientistas descobrem que comer chocolate todo dia emagrece...'",
    help="Quanto mais texto, melhor ser√° a an√°lise."
)

# Bot√£o para an√°lise
if st.button("Analisar Not√≠cia üîç", type="primary", use_container_width=True):
    if texto_usuario.strip() == "":
        st.warning("Por favor, insira um texto para an√°lise.")
    else:
        with st.spinner("Analisando o texto..."):
            # Pr√©-processa o texto
            texto_limpo = preprocessar_texto(texto_usuario)
            
            # Vetoriza o texto (transforma em n√∫meros)
            texto_vetorizado = vectorizer.transform([texto_limpo])
            
            # Faz a previs√£o
            previsao = model.predict(texto_vetorizado)
            probabilidade = model.predict_proba(texto_vetorizado)
            
            # Mostra os resultados
            st.subheader("üìä Resultado da An√°lise:")
            
            if previsao[0] == 0:
                st.error(f"**üö´ POTENCIAL FAKE NEWS**")
                st.progress(probabilidade[0][0])
                st.write(f"**Confian√ßa da an√°lise:** {probabilidade[0][0] * 100:.2f}%")
            else:
                st.success(f"**‚úÖ NOT√çCIA CONFI√ÅVEL**")
                st.progress(probabilidade[0][1])
                st.write(f"**Confian√ßa da an√°lise:** {probabilidade[0][1] * 100:.2f}%")
            
            # Dashboard de informa√ß√µes
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Probabilidade de ser Fake", f"{probabilidade[0][0] * 100:.2f}%")
            with col2:
                st.metric("Probabilidade de ser Verdadeira", f"{probabilidade[0][1] * 100:.2f}%")

# Informa√ß√µes sobre o projeto
with st.expander("‚ÑπÔ∏è Sobre este projeto"):
    st.write("""
    **Tecnologia:** 
    - Modelo de Machine Learning (SVM) treinado com o dataset Fake.Br Corpus
    - Acuracia do modelo: **96.81%**
    - Processamento de Linguagem Natural (NLP)
    
    **Como funciona:**
    O modelo analisa padr√µes lingu√≠sticos e palavras-chave presentes em not√≠cias 
    previamente classificadas como verdadeiras ou falsas.
    
    **Desenvolvido por:** [Nomes do Grupo]
    """)

# Rodap√©
st.markdown("---")
st.caption("‚ö†Ô∏è Este √© um prot√≥tipo para fins educacionais. Sempre verifique informa√ß√µes em fontes confi√°veis.")